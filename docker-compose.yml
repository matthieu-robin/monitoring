prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    restart: unless-stopped
    volumes:
      - ./data/prometheus/config:/etc/prometheus/
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    user: "1000:1000"
    expose:
      - 9090
    ports:
      - 9090:9090
    links:
       - cadvisor:cadvisor
       - node-exporter:node-exporter

cadvisor:
    image: google/cadvisor:latest
    container_name: monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
      
node-exporter:
  image: prom/node-exporter:latest
  container_name: monitoring_node_exporter
  restart: unless-stopped
  expose:
    - 9100

loki:
    image: grafana/loki:2.0.0
    container_name: monitoring_loki
    ports:
      - 3100:3100
    volumes:
      - ./data/loki:/etc/loki
    command: -config.file=/etc/loki/local-config.yaml

promtail:
    image: grafana/promtail:2.0.0
    container_name: monitoring_promtail
    ports:
      - 9080:9080
    expose:
      - 9080
    volumes:
      - /var/log:/var/log
      - ./data/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml

grafana:
  image: grafana/grafana:latest
  container_name: monitoring_grafana
  restart: unless-stopped
  links:
    - prometheus:prometheus
  volumes:
    - ./data/grafana:/var/lib/grafana
  environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin
    - GF_USERS_ALLOW_SIGN_UP=false
  user: "104"
  ports:
    - 3000:3000
  expose:
    - 3000

# Dasboards:
# https://grafana.com/grafana/dashboards/1860
# https://grafana.com/grafana/dashboards/13112
# https://grafana.com/grafana/dashboards/893
# https://grafana.com/grafana/dashboards/10467
# https://grafana.com/grafana/dashboards/2129

# Reload Config Prometheus
# curl -X POST http://localhost:9090/-/reload

# Configuration Docker daemon
# C:\ProgramData\docker\config\daemon.json
# {
#   "metrics-addr" : "127.0.0.1:9323",
#   "experimental" : true,
#   "debug" : true,
#   "log-driver": "loki",
#   "log-opts": {
#       "loki-url": "http://localhost:3100/loki/api/v1/push",
#       "loki-batch-size": "400"
#  }
# }


# Windows Exporter Install:
#$url = "https://github.com/prometheus-community/windows_exporter/releases/download/v0.14.0/windows_exporter-0.14.0-amd64.msi"
#>> $output = "C:\Users\windows.msi"
#>> $start_time = Get-Date
#>> $wc = New-Object System.Net.WebClient
#>> $wc.DownloadFile($url, $output)
#>> msiexec /i C:\Users\windows.msi ENABLED_COLLECTORS=cpu,cs,logical_disk,net,os,service,system,textfile,container,memory,ad,adfs,dfsr,dhcp,dns,fsrmquota,hyperv,iis,logical_disk,logon,msmq,mssql,netframework_clrexceptions,netframework_clrinterop,netframework_clrjit,netframework_clrloading,netframework_clrlocksandthreads,netframework_clrmemory,netframework_clrremoting,netframework_clrsecurity,process,remote_fx,service,system,tcp,thermalzone,terminal_services,vmware,textfile
